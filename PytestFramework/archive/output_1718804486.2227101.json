{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x000002C8E7A85940>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\nC:\\Python312\\Lib\\site-packages\\_pytest\\runner.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Python312\\Lib\\site-packages\\_pytest\\runner.py:263: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nC:\\Python312\\Lib\\site-packages\\pluggy\\_hooks.py:501: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nC:\\Python312\\Lib\\site-packages\\pluggy\\_manager.py:119: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nC:\\Python312\\Lib\\site-packages\\_pytest\\unraisableexception.py:85: in pytest_runtest_setup\n    yield from unraisable_exception_runtest_hook()\nC:\\Python312\\Lib\\site-packages\\_pytest\\unraisableexception.py:65: in unraisable_exception_runtest_hook\n    yield\nC:\\Python312\\Lib\\site-packages\\_pytest\\logging.py:833: in pytest_runtest_setup\n    yield from self._runtest_for(item, \"setup\")\nC:\\Python312\\Lib\\site-packages\\_pytest\\logging.py:822: in _runtest_for\n    yield\nC:\\Python312\\Lib\\site-packages\\_pytest\\capture.py:877: in pytest_runtest_setup\n    return (yield)\nC:\\Python312\\Lib\\site-packages\\_pytest\\threadexception.py:82: in pytest_runtest_setup\n    yield from thread_exception_runtest_hook()\nC:\\Python312\\Lib\\site-packages\\_pytest\\threadexception.py:63: in thread_exception_runtest_hook\n    yield\nC:\\Python312\\Lib\\site-packages\\_pytest\\runner.py:158: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\nC:\\Python312\\Lib\\site-packages\\_pytest\\runner.py:514: in setup\n    raise exc\nC:\\Python312\\Lib\\site-packages\\_pytest\\runner.py:511: in setup\n    col.setup()\nC:\\Python312\\Lib\\site-packages\\_pytest\\python.py:1834: in setup\n    self._request._fillfixtures()\nC:\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py:689: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\nC:\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py:547: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\nC:\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py:566: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py:648: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py:1087: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Python312\\Lib\\site-packages\\pluggy\\_hooks.py:501: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nC:\\Python312\\Lib\\site-packages\\pluggy\\_manager.py:119: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nC:\\Python312\\Lib\\site-packages\\_pytest\\setuponly.py:36: in pytest_fixture_setup\n    return (yield)\nC:\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py:1140: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py:910: in call_fixture_func\n    fixture_result = next(generator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PytestFramework.SeleniumTest.test_selenium_cases.TestGoogleSearch object at 0x000002C8E7A7E7E0>\nrequest = <SubRequest '_xunit_setup_method_fixture_TestGoogleSearch' for <Function test_search_on_google>>\n\n    @fixtures.fixture(\n        autouse=True,\n        scope=\"function\",\n        # Use a unique name to speed up lookup.\n        name=f\"_xunit_setup_method_fixture_{self.obj.__qualname__}\",\n    )\n    def xunit_setup_method_fixture(self, request) -> Generator[None, None, None]:\n        method = request.function\n        if setup_method is not None:\n            func = getattr(self, setup_name)\n            _call_with_optional_argument(func, method)\n            if emit_nose_setup_warning:\n>               warnings.warn(\n                    NOSE_SUPPORT_METHOD.format(\n                        nodeid=request.node.nodeid, method=\"setup\"\n                    ),\n                    stacklevel=2,\n                )\nE               pytest.PytestRemovedIn8Warning: Support for nose tests is deprecated and will be removed in a future release.\nE               SeleniumTest/test_selenium_cases.py::TestGoogleSearch::test_search_on_google is using nose-specific method: `setup(self)`\nE               To remove this warning, rename it to `setup_method(self)`\nE               See docs: https://docs.pytest.org/en/stable/deprecations.html#support-for-tests-written-for-nose\n\nC:\\Python312\\Lib\\site-packages\\_pytest\\python.py:888: PytestRemovedIn8Warning\n", "test_name": "test_search_on_google", "rerun": "0"}}, "suite_name": "SeleniumTest/test_selenium_cases.py"}}}, "date": "June 19, 2024", "start_time": 1718804383.6516852, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}